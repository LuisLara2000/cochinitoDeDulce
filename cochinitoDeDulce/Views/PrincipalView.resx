<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbLogo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AO/g27f/AxyTzDtDvpdAAAAAAElFTkSuQmCC
</value>
  </data>
</root>